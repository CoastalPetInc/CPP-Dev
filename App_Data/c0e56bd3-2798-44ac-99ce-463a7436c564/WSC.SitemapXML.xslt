<?xml version="1.0" encoding="UTF-8"?><!DOCTYPE xsl:Stylesheet [ <!ENTITY nbsp "&#x00A0;"> ]><xsl:stylesheetversion="1.0"xmlns:xsl="http://www.w3.org/1999/XSL/Transform"xmlns:msxml="urn:schemas-microsoft-com:xslt"xmlns:msxsl="urn:schemas-microsoft-com:xslt"xmlns:umbraco.library="urn:umbraco.library"xmlns:scripts="urn:scripts"exclude-result-prefixes="msxml umbraco.library scripts">    <xsl:output method="xml" omit-xml-declaration="yes" encoding="utf-8" indent="yes"/>    <xsl:param name="currentPage"/>  <xsl:param name="ignoreAlias" select="/macro/ignoreAlias"/>  <xsl:variable name="maxLevelForSitemap" select="6"/>  <xsl:variable name="url" select="concat('http://',umbraco.library:RequestServerVariables('HTTP_HOST'))" />  <xsl:variable name="showMeta" select="(umbraco.library:RequestQueryString('meta') != '')" />    <xsl:template match="/">    <xsl:value-of select="umbraco.library:ChangeContentType('text/xml')"/>    <xsl:choose>      <xsl:when test="$showMeta">        <xsl:text disable-output-escaping="yes">&lt;urlset&gt;</xsl:text>      </xsl:when>      <xsl:otherwise>        <xsl:text disable-output-escaping="yes">&lt;urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9"&gt;</xsl:text>      </xsl:otherwise>    </xsl:choose>            <url>          <xsl:if test="$showMeta">            <xsl:attribute name="level">1</xsl:attribute>            <xsl:attribute name="name"> <xsl:value-of select="$currentPage/ancestor-or-self::* [@isDoc][@level=1]/siteName" /> </xsl:attribute>          </xsl:if>          <loc> <xsl:value-of select="concat($url,'/')"/> </loc>          <changefreq>daily</changefreq>          <lastmod> <xsl:value-of select="concat($currentPage/ancestor-or-self::* [@isDoc][@level=1]/@updateDate,'+00:00')" /> </lastmod>          <priority>1</priority>        </url>        <xsl:call-template name="drawNodes">          <xsl:with-param name="parent" select="$currentPage/ancestor-or-self::* [@isDoc][@level=1]"/>        </xsl:call-template>            <xsl:text disable-output-escaping="yes">&lt;/urlset&gt;</xsl:text>  </xsl:template>    <!-- Draw Nodes -->  <xsl:template name="drawNodes">    <xsl:param name="parent"/>    <xsl:if test="umbraco.library:IsProtected($parent/@id, $parent/@path) = 0">      <xsl:for-each select="$parent/* [@isDoc][string(./umbracoNaviHide) != '1' and @level &lt;= $maxLevelForSitemap and contains(concat($ignoreAlias,','), concat(name(), ','))=false]">        <url>          <xsl:if test="$showMeta">            <xsl:attribute name="level"><xsl:value-of select="@level" /></xsl:attribute>            <xsl:attribute name="name">            <!-- Add the display name -->            <xsl:choose>              <xsl:when test="string(./pageNavigationName) != ''">                <xsl:value-of select="./pageNavigationName"/>              </xsl:when>              <xsl:otherwise>                <xsl:value-of select="@nodeName"/>              </xsl:otherwise>            </xsl:choose>            </xsl:attribute>          </xsl:if>          <loc><xsl:value-of select="$url"/><xsl:value-of select="umbraco.library:NiceUrl(@id)"/></loc>          <lastmod><xsl:value-of select="concat(@updateDate,'+00:00')" /></lastmod>          <changefreq><xsl:value-of select="scripts:GetChangeFreq(@updateDate)" /></changefreq>          <priority><xsl:value-of select="scripts:GetPriority(umbraco.library:NiceUrl(@id))" /></priority>        </url>        <xsl:if test="count(./* [@isDoc][string(./umbracoNaviHide) != '1' and @level &lt;= $maxLevelForSitemap and contains(concat($ignoreAlias,','), concat(name(), ','))=false]) &gt; 0">          <xsl:call-template name="drawNodes">            <xsl:with-param name="parent" select="."/>          </xsl:call-template>        </xsl:if>      </xsl:for-each>    </xsl:if>  </xsl:template>  <msxsl:script language="CSharp" implements-prefix="scripts">    <![CDATA[public double GetPriority(string url)      {      int pos=0;      int count=0;      while(pos!=-1)      {      count++;      pos = url.IndexOf('/', pos+1);      }      double priority = (100 - 20*count)/100.0;      return priority > 0.1 ? priority : 0.1;      }            public string GetChangeFreq(string dateString)      {      TimeSpan diff = DateTime.Now - DateTime.Parse(dateString);      if(diff.Days<1)      return "hourly";      if(diff.Days<=2)      return "daily";      if(diff.Days<=8)      return "weekly";      return "monthly";      }]]>  </msxsl:script></xsl:stylesheet>